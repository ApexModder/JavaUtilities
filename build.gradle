plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'

	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version "${git_changelog_version}"
}

group "${proj_group}"
version "${proj_version}"
archivesBaseName = "${proj_name}"

sourceSets {
	api {
		java {
			srcDirs = [ 'src/api/java' ]
		}
		resources {
			srcDirs = [ 'src/api/resources' ]
		}
	}

	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://libraries.minecraft.net/' }
	maven { url 'https://maven.apexmods.xyz/' }
}

dependencies {
	apiImplementation "org.jetbrains:annotations:${jetbrains_annotations_version}"
	apiImplementation "com.google.code.gson:gson:${gson_version}"
	apiImplementation "com.google.guava:guava:${guava_version}"
	apiImplementation "commons-io:commons-io:${commons_io_version}"
	apiImplementation "commons-logging:commons-logging:${commons_logging_version}"
	apiImplementation "org.apache.commons:commons-compress:${commons_compress_version}"
	apiImplementation "org.apache.commons:commons-lang3:${commons_lang_version}"
	apiImplementation "org.apache.httpcomponents:httpclient:${http_client_version}"
	apiImplementation "org.apache.httpcomponents:httpcore:${http_core_version}"
	apiImplementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
	apiImplementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
	apiImplementation "com.mojang:logging:${mojang_logging_version}"

	implementation "org.jetbrains:annotations:${jetbrains_annotations_version}"
	implementation "com.google.code.gson:gson:${gson_version}"
	implementation "com.google.guava:guava:${guava_version}"
	implementation "commons-io:commons-io:${commons_io_version}"
	implementation "commons-logging:commons-logging:${commons_logging_version}"
	implementation "org.apache.commons:commons-compress:${commons_compress_version}"
	implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
	implementation "org.apache.httpcomponents:httpclient:${http_client_version}"
	implementation "org.apache.httpcomponents:httpcore:${http_core_version}"
	implementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
	implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(java_version))
	}

	withSourcesJar()
	withJavadocJar()
}

task apiJavadoc(type: Javadoc) {
	source = sourceSets.api.allJava
	classpath = sourceSets.api.compileClasspath
}

tasks.javadoc {
	source += [ sourceSets.api.allJava, sourceSets.main.allJava ]
	dependsOn tasks.apiJavadoc
	classpath = sourceSets.main.compileClasspath
}

task apiJar(type: Jar, dependsOn: classes) {
	classifier 'api'
	from sourceSets.api.output.classesDirs
	from sourceSets.api.output.resourcesDir
}

task apiSourcesJar(type: Jar, dependsOn: classes) {
	classifier 'api-sources'
	from sourceSets.api.allJava
	from sourceSets.api.resources
}

task apiJavadocJar(type: Jar, dependsOn: apiJavadoc) {
	classifier 'api-javadoc'
	from tasks.apiJavadoc
}

tasks.jar {
	from sourceSets.api.output.classesDirs
	from sourceSets.api.output.resourcesDir
}

tasks.sourcesJar {
	from sourceSets.api.allJava
	from sourceSets.api.resources
}

tasks.javadocJar {
	dependsOn tasks.apiJavadocJar
}

tasks.withType(Javadoc) {
	def standardJavadocDocletOptions = options as StandardJavadocDocletOptions
	standardJavadocDocletOptions.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.release.set(JavaLanguageVersion.of(java_version).asInt())

	javaToolchains {
		compilerFor {
			languageVersion.set(JavaLanguageVersion.of(java_version))
		}
	}
}

tasks.withType(Jar) {
	from file('CHANGELOG.md')
	from file('LICENSE')

	manifest {
		attributes([
				'Specification-Title': "${proj_name}",
				'Specification-Vendor': 'Apex',
				'Specification-Version': "JAVA_${java_version}",

				'Implementation-Title': "${proj_name}",
				'Implementation-Version': "${proj_version}",
				'Implementation-Vendor' : 'Apex',
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

artifacts {
	archives tasks.jar
	archives tasks.sourcesJar
	archives tasks.javadocJar
	archives tasks.apiJar
	archives tasks.apiSourcesJar
	archives tasks.apiJavadocJar
}

def previousGitTag = { ->
	try {
		def code = new ByteArrayOutputStream()

		exec {
			commandLine 'git', 'describe', '--abbrev=0', '--tags', '--exclude', "v${proj_version}"
			standardOutput code
		}

		return code.toString().trim()
	} catch(e) {
		return ''
	}
}

task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	file = file("CHANGELOG.md")
	fromRepo = file('.')
	fromRef = "${previousGitTag}"
	templateContent = file('.github/changelog.mustache').text
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId "${proj_group}"
			artifactId "${proj_name}"
			version "${proj_version}"

			artifact tasks.jar
			artifact tasks.sourcesJar
			artifact tasks.javadocJar
			artifact tasks.apiJar
			artifact tasks.apiSourcesJar
			artifact tasks.apiJavadocJar
		}
	}

	repositories {
		mavenLocal()

		if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}